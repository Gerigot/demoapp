import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchUsers } from "../talk/talkAPI";
import { fetchAddNewUser, NewUserParams } from "./usersAPI";

export interface User {
  id: number;
  username: string;
}

export interface UserState {
  status: "idle" | "loading" | "failed";
  list: User[];
}
export const getUsers = createAsyncThunk("users/getUsers", async () => {
  const response = await fetchUsers();
  console.log(response);
  return response;
});
export const addNewUser = createAsyncThunk(
  "users/addNewUser",
  async (newUserParams: NewUserParams) => {
    const response = await fetchAddNewUser(newUserParams);
    console.log(response);
    return response;
  }
);

const initialState: UserState = {
  status: "idle",
  list: [],
};

export const usersSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUsers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getUsers.fulfilled, (state, action) => {
        state.status = "idle";
        state.list = action.payload;
      })
      .addCase(addNewUser.pending, (state) => {
        state.status = "loading";
      })
      .addCase(addNewUser.fulfilled, (state, action) => {
        state.status = "idle";
        state.list = [...state.list, action.payload];
      });
  },
});

//   export const {} = talkListSlice.actions;

export default usersSlice.reducer;

import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { Talk } from '../talk/TalkSlice';
import { fetchAddNewTalk, fetchTalkLists, NewTalkParams } from './talkListAPI';

export interface TalkListState {
    status: 'idle' | 'loading' | 'failed';
    talks: Talk[];
}
  const initialState: TalkListState = {
      status: 'idle',
      talks: []
  };
  

  export const getTalkList = createAsyncThunk(
    'talkList/getTalkList',
    async () => {
      const response = await fetchTalkLists();
      // The value we return becomes the `fulfilled` action payload
      console.log(response);
      return response;
    }
  );
  export const addNewTalk = createAsyncThunk(
    'talkList/addNewTalk',
    async (newTalkParams:NewTalkParams) => {
      const response = await fetchAddNewTalk(newTalkParams);
      // The value we return becomes the `fulfilled` action payload
      return response;
    }
  );


  export const talkListSlice = createSlice({
    name: 'talkList',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
     
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getTalkList.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(getTalkList.fulfilled, (state, action) => {
            console.log(action.payload);
            state.status = 'idle';
            state.talks = action.payload;
          })
          .addCase(addNewTalk.pending, (state) => {
            state.status = 'loading';
          })
          .addCase(addNewTalk.fulfilled, (state, action) => {
            console.log(action.payload);
            state.status = 'idle';
            state.talks = [...state.talks, action.payload];
            
        });
    },
  });


//   export const {} = talkListSlice.actions;


export default talkListSlice.reducer;
